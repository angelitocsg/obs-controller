{"version":3,"sources":["interfaces/IObsController.ts","appContext.tsx","components/Header.tsx","components/Setup.tsx","services/websocketService.ts","pages/Main.tsx","serviceWorker.ts","index.tsx"],"names":["SceneStatus","ObsStatus","ObsControllerStateContext","React","createContext","ObsControllerDispatchContext","defaultState","address","buttons","buttonWidth","initialState","stateLocal","localStorage","getItem","JSON","parse","loadState","obsControllerReducer","state","action","type","saveState","payload","status","scenes","Error","setup","setItem","stringify","ObsProvider","children","useReducer","dispatch","Provider","value","Header","toogleSetup","className","style","flex","float","onClick","Setup","setupData","handleSetupChange","id","name","onChange","password","autoComplete","step","checked","obs","OBSWebSocket","getThumbs","a","sceneWithThumbs","i","length","getThumb","push","scene","send","embedPictureFormat","sourceName","width","thumbnailWidth","then","data","thumbnail","img","catch","err","console","error","obsService","connect","getScenes","getPreview","on","event","callback","log","setCurrentScene","Main","useState","scenesToRender","setScenes","hasObsEvents","useRef","context","useContext","undefined","useObsDispatch","obsState","useObsState","sceneLoad","useCallback","current","scenesList","map","Program","swp","scenesWithPreview","Preview","setupEvents","useEffect","onSetup","setOnSetup","setSetupData","e","field","target","parseInt","index","key","minWidth","sceneSwitch","src","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4e1d7a87.chunk.js","sourcesContent":["export enum SceneStatus {\r\n  None,\r\n  Preview,\r\n  Program,\r\n}\r\n\r\nexport enum ObsStatus {\r\n  Connected = \"Connected\",\r\n  Disconnected = \"Disconnected\",\r\n}\r\n\r\nexport interface IScene {\r\n  name?: string;\r\n  thumbnail?: string;\r\n  thumbnailWidth?: number;\r\n  status?: SceneStatus;\r\n}\r\n\r\nexport interface IObsConnect {\r\n  address?: string;\r\n  password?: string;\r\n}\r\n\r\nexport interface IObsController extends IObsConnect {\r\n  buttons?: number;\r\n  buttonWidth?: number;\r\n  status?: ObsStatus;\r\n  scenes?: IScene[];\r\n}\r\n","import React from \"react\";\r\n\r\nimport { IObsController } from \"./interfaces/IObsController\";\r\n\r\nconst ObsControllerStateContext = React.createContext<IObsController>({});\r\nconst ObsControllerDispatchContext = React.createContext<any>({});\r\n\r\nexport interface IAction {\r\n  type?: string;\r\n  payload?: any;\r\n}\r\n\r\nconst defaultState: IObsController = {\r\n  address: \"localhost:4444\",\r\n  buttons: 8,\r\n  buttonWidth: 100,\r\n};\r\n\r\nconst loadState = (): IObsController => {\r\n  var stateLocal = localStorage.getItem(\"setup\");\r\n  if (!stateLocal) return defaultState;\r\n  return JSON.parse(stateLocal);\r\n};\r\n\r\nconst initialState: IObsController = loadState();\r\n\r\nconst obsControllerReducer = (\r\n  state: IObsController,\r\n  action: IAction\r\n): IObsController => {\r\n  switch (action.type) {\r\n    case \"setup\": {\r\n      saveState({ ...action.payload });\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    }\r\n    case \"status\": {\r\n      return { ...state, status: action.payload };\r\n    }\r\n    case \"scenes\": {\r\n      return { ...state, scenes: action.payload };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst saveState = (setup: IObsController) => {\r\n  localStorage.setItem(\"setup\", JSON.stringify(setup));\r\n};\r\n\r\nconst ObsProvider = ({ children }: any) => {\r\n  const [state, dispatch] = React.useReducer(\r\n    obsControllerReducer,\r\n    initialState\r\n  );\r\n\r\n  return (\r\n    <ObsControllerStateContext.Provider value={state}>\r\n      <ObsControllerDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </ObsControllerDispatchContext.Provider>\r\n    </ObsControllerStateContext.Provider>\r\n  );\r\n};\r\n\r\nconst useObsState = () => {\r\n  const context = React.useContext(ObsControllerStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useObsState must be used within a CountProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst useObsDispatch = () => {\r\n  const context = React.useContext(ObsControllerDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useObsDispatch must be used within a CountProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { ObsProvider, useObsState, useObsDispatch };\r\n","import React from \"react\";\r\n\r\nimport { ObsStatus } from \"../interfaces/IObsController\";\r\n\r\ninterface IProps {\r\n  status?: ObsStatus;\r\n  toogleSetup: () => void;\r\n}\r\n\r\nconst Header: React.FC<IProps> = ({ status, toogleSetup }: IProps) => (\r\n  <div className=\"status-line\">\r\n    <div style={{ flex: 1 }}>Status: {status}</div>\r\n    <div style={{ float: \"right\" }}>\r\n      <button className=\"btn-setup\" onClick={toogleSetup}>\r\n        SETUP\r\n      </button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport { Header };\r\n","import React from \"react\";\r\n\r\nimport { IObsController, ObsStatus } from \"../interfaces/IObsController\";\r\nimport { Header } from \"./Header\";\r\n\r\ninterface IProps {\r\n  status?: ObsStatus;\r\n  setupData: IObsController;\r\n  toogleSetup: () => void;\r\n  handleSetupChange: (e: any) => void;\r\n}\r\n\r\nconst Setup: React.FC<IProps> = ({\r\n  status,\r\n  setupData,\r\n  toogleSetup,\r\n  handleSetupChange,\r\n}: IProps) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <Header status={status} toogleSetup={toogleSetup} />\r\n      <form>\r\n        <div id=\"setupArea\">\r\n          <div className=\"formGroup\">\r\n            <label>Hostname</label>\r\n            <input\r\n              name=\"address\"\r\n              value={setupData.address}\r\n              onChange={handleSetupChange}\r\n              type=\"text\"\r\n            />\r\n          </div>\r\n          <div className=\"formGroup\">\r\n            <label>Password</label>\r\n            <input\r\n              name=\"password\"\r\n              value={setupData.password}\r\n              onChange={handleSetupChange}\r\n              type=\"password\"\r\n              autoComplete=\"none\"\r\n            />\r\n          </div>\r\n          <div className=\"formGroup\">\r\n            <label>Button width</label>\r\n            <input\r\n              name=\"buttonWidth\"\r\n              value={setupData.buttonWidth}\r\n              onChange={handleSetupChange}\r\n              type=\"number\"\r\n              step={15}\r\n              autoComplete=\"none\"\r\n            />\r\n          </div>\r\n          <div className=\"formGroup\">\r\n            <label>Buttons</label>\r\n            <div className=\"optButton\">\r\n              <input\r\n                type=\"radio\"\r\n                value={2}\r\n                onChange={handleSetupChange}\r\n                name=\"buttons\"\r\n                checked={setupData.buttons === 2}\r\n              />\r\n              2\r\n            </div>\r\n            <div className=\"optButton\">\r\n              <input\r\n                type=\"radio\"\r\n                value={4}\r\n                onChange={handleSetupChange}\r\n                name=\"buttons\"\r\n                checked={setupData.buttons === 4}\r\n              />\r\n              4\r\n            </div>\r\n            <div className=\"optButton\">\r\n              <input\r\n                type=\"radio\"\r\n                value={6}\r\n                onChange={handleSetupChange}\r\n                name=\"buttons\"\r\n                checked={setupData.buttons === 6}\r\n              />\r\n              6\r\n            </div>\r\n            <div className=\"optButton\">\r\n              <input\r\n                type=\"radio\"\r\n                value={8}\r\n                onChange={handleSetupChange}\r\n                name=\"buttons\"\r\n                checked={setupData.buttons === 8}\r\n              />\r\n              8\r\n            </div>\r\n            <div className=\"optButton\">\r\n              <input\r\n                type=\"radio\"\r\n                value={10}\r\n                onChange={handleSetupChange}\r\n                name=\"buttons\"\r\n                checked={setupData.buttons === 10}\r\n              />\r\n              10\r\n            </div>\r\n            <div className=\"optButton\">\r\n              <input\r\n                type=\"radio\"\r\n                value={12}\r\n                onChange={handleSetupChange}\r\n                name=\"buttons\"\r\n                checked={setupData.buttons === 12}\r\n              />\r\n              12\r\n            </div>\r\n            <div className=\"optButton\">\r\n              <input\r\n                type=\"radio\"\r\n                value={14}\r\n                onChange={handleSetupChange}\r\n                name=\"buttons\"\r\n                checked={setupData.buttons === 14}\r\n              />\r\n              14\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Setup };\r\n","import OBSWebSocket from \"obs-websocket-js\";\r\n\r\nimport { IObsConnect, IScene } from \"../interfaces/IObsController\";\r\n\r\nlet obs = new OBSWebSocket();\r\n\r\nconst connect = ({\r\n  address = \"localhost:4444\",\r\n  password = \"\",\r\n}: IObsConnect) => {\r\n  return obs.connect({ address, password });\r\n};\r\n\r\nconst getScenes = () => obs.send(\"GetSceneList\");\r\n\r\nconst getPreview = () => obs.send(\"GetPreviewScene\");\r\n\r\nconst getThumbs = async (scenes: IScene[]) => {\r\n  const sceneWithThumbs: IScene[] = [];\r\n  for (let i = 0; i < scenes.length; i++) {\r\n    sceneWithThumbs.push(await getThumb(scenes[i]));\r\n  }\r\n  return sceneWithThumbs;\r\n};\r\n\r\nconst getThumb = async (scene: IScene) => {\r\n  if (!scene.name) return scene;\r\n\r\n  return await obs\r\n    .send(\"TakeSourceScreenshot\", {\r\n      embedPictureFormat: \"png\",\r\n      sourceName: scene.name,\r\n      width: scene.thumbnailWidth && scene.thumbnailWidth * 2,\r\n    })\r\n    .then(\r\n      (data): IScene => ({\r\n        ...scene,\r\n        thumbnail: data.img,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      console.error(err);\r\n      return scene;\r\n    });\r\n};\r\n\r\ntype TEventHandler = \"SwitchScenes\";\r\n\r\nconst on = (event: TEventHandler, callback: (data: any) => void) => {\r\n  if (!obs) return;\r\n\r\n  obs.on(\"ConnectionOpened\", () => {\r\n    console.log(\"event: ConnectionOpened\");\r\n  });\r\n  obs.on(\"ConnectionClosed\", (data) => {\r\n    console.log(data);\r\n    console.log(\"event: ConnectionClosed\");\r\n  });\r\n  obs.on(\"AuthenticationSuccess\", () => {\r\n    console.log(\"event: AuthenticationSuccess\");\r\n  });\r\n  obs.on(\"AuthenticationFailure\", (data) => {\r\n    console.log(data);\r\n    console.log(\"event: AuthenticationFailure\");\r\n  });\r\n  obs.on(\"SwitchScenes\", (data) => {\r\n    console.log(\"event: SwitchScenes\");\r\n    if (event === \"SwitchScenes\") callback(data);\r\n  });\r\n};\r\n\r\nconst setCurrentScene = (scene: string) => {\r\n  obs.send(\"SetCurrentScene\", { \"scene-name\": scene });\r\n};\r\n\r\nconst obsService = {\r\n  connect,\r\n  getScenes,\r\n  getPreview,\r\n  getThumbs,\r\n  on,\r\n  setCurrentScene,\r\n};\r\n\r\nexport { obsService };\r\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\nimport { useObsDispatch, useObsState } from \"../appContext\";\r\nimport { Header } from \"../components/Header\";\r\nimport { Setup } from \"../components/Setup\";\r\nimport {\r\n  IObsController,\r\n  IScene,\r\n  SceneStatus,\r\n} from \"../interfaces/IObsController\";\r\nimport { obsService } from \"../services/websocketService\";\r\n\r\nconst Main: React.FC = () => {\r\n  const [scenesToRender, setScenes] = useState<IScene[]>();\r\n\r\n  const hasObsEvents = useRef(false);\r\n  const dispatch = useObsDispatch();\r\n  const obsState = useObsState();\r\n\r\n  const sceneLoad = useCallback(() => {\r\n    obsService.getScenes().then(({ scenes, ...rest }) => {\r\n      const current = rest[\"current-scene\"];\r\n      const scenesList = scenes.map<IScene>((scene) =>\r\n        scene.name === current\r\n          ? {\r\n              name: scene.name,\r\n              thumbnailWidth: obsState.buttonWidth,\r\n              status: SceneStatus.Program,\r\n            }\r\n          : { name: scene.name, thumbnailWidth: obsState.buttonWidth }\r\n      );\r\n\r\n      dispatch({\r\n        type: \"scenes\",\r\n        payload: scenesList,\r\n      });\r\n      console.log(\"Scenes loaded\");\r\n\r\n      obsService.getThumbs(scenesList).then((swp) => {\r\n        dispatch({\r\n          type: \"scenes\",\r\n          payload: swp,\r\n        });\r\n\r\n        console.log(\"Thumbs loaded\");\r\n\r\n        obsService.getPreview().then((data) => {\r\n          const scenesWithPreview = swp.map((scene) =>\r\n            scene.name === data.name\r\n              ? { ...scene, status: SceneStatus.Preview }\r\n              : scene\r\n          );\r\n          dispatch({\r\n            type: \"scenes\",\r\n            payload: scenesWithPreview,\r\n          });\r\n          setScenes(scenesWithPreview);\r\n        });\r\n      });\r\n    });\r\n  }, [dispatch, obsState.buttonWidth]);\r\n\r\n  const setupEvents = useCallback(() => {\r\n    if (hasObsEvents.current) return;\r\n    hasObsEvents.current = true;\r\n\r\n    obsService.on(\"SwitchScenes\", () => {\r\n      sceneLoad();\r\n    });\r\n  }, [sceneLoad]);\r\n  useEffect(() => setupEvents(), [setupEvents]);\r\n\r\n  useEffect(() => {\r\n    obsService.connect({}).then(() => {\r\n      console.log(\"OBS connected!\");\r\n      dispatch({ type: \"status\", payload: \"Connected\" });\r\n      sceneLoad();\r\n    });\r\n  }, [dispatch, sceneLoad]);\r\n\r\n  const sceneSwitch = (scene?: string) => {\r\n    if (!scene) return;\r\n    obsService.setCurrentScene(scene);\r\n  };\r\n\r\n  const [onSetup, setOnSetup] = useState(false);\r\n  const [setupData, setSetupData] = useState<IObsController>({ ...obsState });\r\n  const toogleSetup = () => {\r\n    if (onSetup) {\r\n      dispatch({ type: \"setup\", payload: setupData });\r\n    }\r\n    setOnSetup(!onSetup);\r\n  };\r\n  const handleSetupChange = (e: any) => {\r\n    const field = e.target.name;\r\n    let value = e.target.value;\r\n    if (field === \"buttons\") value = parseInt(value);\r\n    if (field === \"buttonWidth\") value = parseInt(value);\r\n    setSetupData({ ...setupData, [field]: value });\r\n  };\r\n  useEffect(() => console.log(setupData), [setupData]);\r\n\r\n  return onSetup ? (\r\n    <Setup\r\n      status={obsState.status}\r\n      setupData={setupData}\r\n      handleSetupChange={handleSetupChange}\r\n      toogleSetup={toogleSetup}\r\n    />\r\n  ) : (\r\n    <div className=\"container\">\r\n      <Header status={obsState.status} toogleSetup={toogleSetup} />\r\n      <div className=\"action-line\">\r\n        {scenesToRender?.map(\r\n          (scene, index) =>\r\n            index < (obsState.buttons || 8) && (\r\n              <div\r\n                key={index}\r\n                className={`action-btn ${\r\n                  scene.status === SceneStatus.Program\r\n                    ? \"program\"\r\n                    : scene.status === SceneStatus.Preview\r\n                    ? \"preview\"\r\n                    : \"\"\r\n                }`}\r\n                style={{ minWidth: obsState.buttonWidth }}\r\n                onClick={() => sceneSwitch(scene?.name)}\r\n              >\r\n                <div className=\"action-name\">{scene.name}</div>\r\n                <img src={scene.thumbnail} width=\"70\" alt=\"\" />\r\n              </div>\r\n            )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./assets/button.scss\";\r\nimport \"./assets/form.scss\";\r\nimport \"./assets/style.scss\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Main from \"./pages/Main\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ObsProvider } from \"./appContext\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ObsProvider>\r\n      <Main />\r\n    </ObsProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}