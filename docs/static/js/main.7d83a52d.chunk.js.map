{"version":3,"sources":["interfaces/IObsController.ts","appContext.tsx","services/websocketService.ts","pages/Main.tsx","serviceWorker.ts","index.tsx"],"names":["SceneStatus","ObsStatus","ObsControllerStateContext","React","createContext","ObsControllerDispatchContext","initialState","address","obsControllerReducer","state","action","type","status","payload","scenes","Error","ObsProvider","children","useReducer","dispatch","Provider","value","obs","OBSWebSocket","getThumbs","a","sceneWithThumbs","i","length","getThumb","push","scene","name","send","embedPictureFormat","sourceName","width","then","data","thumbnail","img","catch","err","console","error","obsService","connect","password","getScenes","getPreview","on","event","callback","log","setCurrentScene","Main","useState","scenesToRender","setScenes","hasObsEvents","useRef","context","useContext","undefined","useObsDispatch","useObsState","useEffect","sceneLoad","useCallback","current","scenesList","map","Program","swp","scenesWithPreview","Preview","setupEvents","className","index","key","onClick","sceneSwitch","src","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7d83a52d.chunk.js","sourcesContent":["export enum SceneStatus {\r\n  None,\r\n  Preview,\r\n  Program,\r\n}\r\n\r\nexport enum ObsStatus {\r\n  Connected = \"Connected\",\r\n  Disconnected = \"Disconnected\",\r\n}\r\n\r\nexport interface IScene {\r\n  name?: string;\r\n  thumbnail?: string;\r\n  status?: SceneStatus;\r\n}\r\n\r\nexport interface IObsConnect {\r\n  address?: string;\r\n  password?: string;\r\n}\r\n\r\nexport interface IObsController extends IObsConnect {\r\n  status?: ObsStatus;\r\n  scenes?: IScene[];\r\n}\r\n","import React from \"react\";\r\nimport { IObsController } from \"./interfaces/IObsController\";\r\n\r\nconst ObsControllerStateContext = React.createContext<IObsController>({});\r\nconst ObsControllerDispatchContext = React.createContext<any>({});\r\n\r\nexport interface IAction {\r\n  type?: string;\r\n  payload?: any;\r\n}\r\n\r\nconst initialState: IObsController = {\r\n  address: \"localhost:4444\",\r\n};\r\n\r\nconst obsControllerReducer = (\r\n  state: IObsController,\r\n  action: IAction\r\n): IObsController => {\r\n  switch (action.type) {\r\n    case \"status\": {\r\n      return { ...state, status: action.payload };\r\n    }\r\n    case \"scenes\": {\r\n      return { ...state, scenes: action.payload };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst ObsProvider = ({ children }: any) => {\r\n  const [state, dispatch] = React.useReducer(\r\n    obsControllerReducer,\r\n    initialState\r\n  );\r\n\r\n  return (\r\n    <ObsControllerStateContext.Provider value={state}>\r\n      <ObsControllerDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </ObsControllerDispatchContext.Provider>\r\n    </ObsControllerStateContext.Provider>\r\n  );\r\n};\r\n\r\nconst useObsState = () => {\r\n  const context = React.useContext(ObsControllerStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useObsState must be used within a CountProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst useObsDispatch = () => {\r\n  const context = React.useContext(ObsControllerDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useObsDispatch must be used within a CountProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { ObsProvider, useObsState, useObsDispatch };\r\n","import OBSWebSocket from \"obs-websocket-js\";\r\n\r\nimport { IScene, IObsConnect } from \"../interfaces/IObsController\";\r\n\r\nlet obs = new OBSWebSocket();\r\n\r\nconst connect = ({ address = \"localhost:4444\", password = \"\" }: IObsConnect) =>\r\n  obs.connect({ address, password });\r\n\r\nconst getScenes = () => obs.send(\"GetSceneList\");\r\n\r\nconst getPreview = () => obs.send(\"GetPreviewScene\");\r\n\r\nconst getThumbs = async (scenes: IScene[]) => {\r\n  const sceneWithThumbs: IScene[] = [];\r\n\r\n  for (let i = 0; i < scenes.length; i++) {\r\n    sceneWithThumbs.push(await getThumb(scenes[i]));\r\n  }\r\n\r\n  return sceneWithThumbs;\r\n};\r\n\r\nconst getThumb = async (scene: IScene) => {\r\n  if (!scene.name) return scene;\r\n\r\n  return await obs\r\n    .send(\"TakeSourceScreenshot\", {\r\n      embedPictureFormat: \"png\",\r\n      sourceName: scene.name,\r\n      width: 200,\r\n    })\r\n    .then(\r\n      (data): IScene => ({\r\n        ...scene,\r\n        thumbnail: data.img,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      console.error(err);\r\n      return scene;\r\n    });\r\n};\r\n\r\ntype TEventHandler = \"SwitchScenes\";\r\n\r\nconst on = (event: TEventHandler, callback: (data: any) => void) => {\r\n  if (!obs) return;\r\n\r\n  obs.on(\"ConnectionOpened\", () => {\r\n    console.log(\"event: ConnectionOpened\");\r\n  });\r\n  obs.on(\"ConnectionClosed\", (data) => {\r\n    console.log(data);\r\n    console.log(\"event: ConnectionClosed\");\r\n  });\r\n  obs.on(\"AuthenticationSuccess\", () => {\r\n    console.log(\"event: AuthenticationSuccess\");\r\n  });\r\n  obs.on(\"AuthenticationFailure\", (data) => {\r\n    console.log(data);\r\n    console.log(\"event: AuthenticationFailure\");\r\n  });\r\n  obs.on(\"SwitchScenes\", (data) => {\r\n    console.log(\"event: SwitchScenes\");\r\n    if (event === \"SwitchScenes\") callback(data);\r\n  });\r\n};\r\n\r\nconst setCurrentScene = (scene: string) => {\r\n  obs.send(\"SetCurrentScene\", { \"scene-name\": scene });\r\n};\r\n\r\nconst obsService = {\r\n  connect,\r\n  getScenes,\r\n  getPreview,\r\n  getThumbs,\r\n  on,\r\n  setCurrentScene,\r\n};\r\n\r\nexport { obsService };\r\n","import React, { useEffect, useState, useCallback, useRef } from \"react\";\r\n\r\nimport { useObsDispatch, useObsState } from \"../appContext\";\r\nimport { IScene, SceneStatus } from \"../interfaces/IObsController\";\r\nimport { obsService } from \"../services/websocketService\";\r\n\r\nconst Main: React.FC = () => {\r\n  const [scenesToRender, setScenes] = useState<IScene[]>();\r\n\r\n  const hasObsEvents = useRef(false);\r\n  const dispatch = useObsDispatch();\r\n  const { status } = useObsState();\r\n\r\n  useEffect(() => {\r\n    console.log(\"oi\");\r\n  }, []);\r\n\r\n  const sceneLoad = useCallback(() => {\r\n    obsService.getScenes().then(({ scenes, ...rest }) => {\r\n      const current = rest[\"current-scene\"];\r\n      const scenesList = scenes.map<IScene>((scene) =>\r\n        scene.name === current\r\n          ? { name: scene.name, status: SceneStatus.Program }\r\n          : { name: scene.name }\r\n      );\r\n\r\n      dispatch({\r\n        type: \"scenes\",\r\n        payload: scenesList,\r\n      });\r\n      console.log(\"Scenes loaded\");\r\n\r\n      obsService.getThumbs(scenesList).then((swp) => {\r\n        dispatch({\r\n          type: \"scenes\",\r\n          payload: swp,\r\n        });\r\n\r\n        console.log(\"Thumbs loaded\");\r\n\r\n        obsService.getPreview().then((data) => {\r\n          const scenesWithPreview = swp.map((scene) =>\r\n            scene.name === data.name\r\n              ? { ...scene, status: SceneStatus.Preview }\r\n              : scene\r\n          );\r\n          dispatch({\r\n            type: \"scenes\",\r\n            payload: scenesWithPreview,\r\n          });\r\n          setScenes(scenesWithPreview);\r\n        });\r\n      });\r\n    });\r\n  }, [dispatch]);\r\n\r\n  const setupEvents = useCallback(() => {\r\n    if (hasObsEvents.current) return;\r\n    hasObsEvents.current = true;\r\n\r\n    obsService.on(\"SwitchScenes\", () => {\r\n      sceneLoad();\r\n    });\r\n  }, [sceneLoad]);\r\n  useEffect(() => setupEvents(), [setupEvents]);\r\n\r\n  useEffect(() => {\r\n    obsService.connect({}).then(() => {\r\n      console.log(\"OBS connected!\");\r\n      dispatch({ type: \"status\", payload: \"Connected\" });\r\n      sceneLoad();\r\n    });\r\n  }, [dispatch, sceneLoad]);\r\n\r\n  const sceneSwitch = (scene?: string) => {\r\n    if (!scene) return;\r\n    obsService.setCurrentScene(scene);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"status-line\">Status: {status}</div>\r\n      <div className=\"action-line\">\r\n        {scenesToRender?.map(\r\n          (scene, index) =>\r\n            index < 8 && (\r\n              <div\r\n                key={index}\r\n                className={`action-btn ${\r\n                  scene.status === SceneStatus.Program\r\n                    ? \"program\"\r\n                    : scene.status === SceneStatus.Preview\r\n                    ? \"preview\"\r\n                    : \"\"\r\n                }`}\r\n                onClick={() => sceneSwitch(scene?.name)}\r\n              >\r\n                <div className=\"action-name\">{scene.name}</div>\r\n                <img src={scene.thumbnail} width=\"70\" alt=\"\" />\r\n              </div>\r\n            )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./assets/button.scss\";\r\nimport \"./assets/style.scss\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Main from \"./pages/Main\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ObsProvider } from \"./appContext\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ObsProvider>\r\n      <Main />\r\n    </ObsProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}